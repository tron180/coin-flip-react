{"version":3,"sources":["Layout.js","Coin.js","App.js","serviceWorker.js","index.js"],"names":["Layout","react_default","a","createElement","src","concat","this","props","ht","alt","Component","Coin","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","head","setState","h","state","tails","t","flips","rand","bind","assertThisInitialized","Math","random","className","src_Layout","onClick","App","src_Coin_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qPAaeA,0LATP,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,iCACAF,EAAAC,EAAAC,cAAA,OAAKC,IAAG,kCAAAC,OAAoCC,KAAKC,MAAMC,GAA/C,QAAyDC,IAAI,0BALhEC,cCwCNC,cArCX,SAAAA,EAAYJ,GAAM,IAAAK,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAP,KAAAK,IACdC,EAAAC,OAAAE,EAAA,EAAAF,CAAAP,KAAAO,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAX,KAAMC,KAUVW,KAAO,WACHN,EAAKO,SAAS,CAACC,EAAIR,EAAKS,MAAMD,EAAI,KAZpBR,EAclBU,MAAQ,WACJV,EAAKO,SAAS,CAACI,EAAIX,EAAKS,MAAME,EAAI,KAblCX,EAAKS,MAAQ,CACTG,MAAQ,EACRJ,EAAI,EACJG,EAAI,EACJf,GAAK,SAETI,EAAKa,KAAOb,EAAKa,KAAKC,KAAVb,OAAAc,EAAA,EAAAd,CAAAD,IAREA,sEAkBdN,KAAKa,SAAS,CAACX,GAAKoB,KAAKC,SAAW,GAAM,QAAU,UACpDvB,KAAKa,SAAS,CAACK,MAAQlB,KAAKe,MAAMG,MAAQ,IACrB,UAAlBlB,KAAKe,MAAMb,GACVF,KAAKY,OAELZ,KAAKgB,yCAIT,OACIrB,EAAAC,EAAAC,cAAA,OAAK2B,UAAU,QACX7B,EAAAC,EAAAC,cAAC4B,EAAD,CAAQvB,GAAIF,KAAKe,MAAMb,KACvBP,EAAAC,EAAAC,cAAA,UAAQ6B,QAAS1B,KAAKmB,MAAtB,gBACAxB,EAAAC,EAAAC,cAAA,mBAAWG,KAAKe,MAAMG,MAAtB,2BAAqDlB,KAAKe,MAAMD,EAAhE,cAA8Ed,KAAKe,MAAME,EAAzF,mBAhCGb,mBCQJuB,MARf,WACE,OACEhC,EAAAC,EAAAC,cAAA,OAAK2B,UAAU,OACb7B,EAAAC,EAAAC,cAAC+B,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxC,EAAAC,EAAAC,cAACuC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ec1fea19.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nclass Layout extends Component{\n    render(){\n        return(\n            <div>\n                <h1>Let's flip a coin !</h1>\n                <img src={`https://tinyurl.com/react-coin-${this.props.ht}-jpg`} alt=\"Heads / Tails\" />\n            </div>\n        );\n    }\n}\n\nexport default Layout;","import React, { Component } from 'react'\nimport './Coin.css'\nimport Layout from './Layout';\n\nclass Coin extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            flips : 0,\n            h : 0,\n            t : 0,\n            ht : \"heads\"\n        };\n        this.rand = this.rand.bind(this);\n    }\n    \n    head = () => {\n        this.setState({h : this.state.h + 1});\n    }\n    tails = () => {\n        this.setState({t : this.state.t + 1});\n    }\n    rand(){\n        this.setState({ht : Math.random() > 0.5 ? 'heads' : 'tails'});\n        this.setState({flips : this.state.flips + 1})\n        if(this.state.ht === \"heads\"){\n            this.head();\n        }else{\n            this.tails();\n        }\n    };\n    render(){\n        return(\n            <div className=\"Coin\">\n                <Layout ht={this.state.ht} />\n                <button onClick={this.rand}>Flip Mee..!!</button>\n                <p>Out of {this.state.flips} flips, there have been {this.state.h} heads and {this.state.t} tails.</p>\n            </div>\n        );\n    }\n}\n\nexport default Coin;","import React from 'react';\nimport Coin from './Coin';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Coin />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}